From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrPowerGamerBR <git@mrpowergamerbr.com>
Date: Sat, 1 Jun 2024 01:22:41 -0300
Subject: [PATCH] SPARKLYPOWER Remap SparklyPower hacky legacy NBT tags

This is only useful for us in SparklyPower, but yeah...

diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterItemStackToDataComponents.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterItemStackToDataComponents.java
index a5a21d1c7579e45b78eae4b42a9f023db74acc0a..921947048648ff4555b80be4ef669a6dd53b12af 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterItemStackToDataComponents.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterItemStackToDataComponents.java
@@ -9,6 +9,7 @@ import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.TypeUtil;
 import ca.spottedleaf.dataconverter.util.NamespaceUtil;
 import net.minecraft.util.Mth;
+
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
@@ -1220,6 +1221,7 @@ public final class ConverterItemStackToDataComponents {
             ret.setString("id", this.id);
             ret.setInt("count", this.count);
             if (!this.tag.isEmpty()) {
+                net.sparklypower.sparklypaper.LegacyNBTRemapper.INSTANCE.remap(this.tag); // SparklyPaper - Remap SparklyPower hacky legacy NBT tags
                 this.components.setMap("minecraft:custom_data", this.tag);
             }
 
diff --git a/src/main/kotlin/net/sparklypower/sparklypaper/LegacyNBTRemapper.kt b/src/main/kotlin/net/sparklypower/sparklypaper/LegacyNBTRemapper.kt
new file mode 100644
index 0000000000000000000000000000000000000000..399225fb883b9771084689d00723d944a89b0902
--- /dev/null
+++ b/src/main/kotlin/net/sparklypower/sparklypaper/LegacyNBTRemapper.kt
@@ -0,0 +1,95 @@
+package net.sparklypower.sparklypaper
+
+import ca.spottedleaf.dataconverter.types.MapType
+
+object LegacyNBTRemapper {
+    /**
+     * Remaps hacky direct NBT storage used in SparklyPower to proper PersistentDataContainer data
+     */
+    fun remap(tag: MapType<String>) {
+        val perfectDreamsMap = tag.getMap<String>("PerfectDreams")
+
+        if (perfectDreamsMap != null) {
+            val publicBukkitValuesMap = tag.getOrCreateMap<String>("PublicBukkitValues")
+
+            // The "setBoolean" functions do set bytes behind the scenes, just like how we do the things in SparklyPower
+            perfectDreamsMap.getStringAndRemove("isJetpack")?.let {
+                publicBukkitValuesMap.setBoolean("sparklypower:is_jetpack", it.toBoolean())
+            }
+
+            perfectDreamsMap.getStringAndRemove("disallowCrafting")?.let {
+                publicBukkitValuesMap.setBoolean("sparklypower:disallow_crafting", it.toBoolean())
+            }
+
+            perfectDreamsMap.getStringAndRemove("poop")?.let {
+                publicBukkitValuesMap.setBoolean("sparklypower:is_poop", it.toBoolean())
+            }
+
+            perfectDreamsMap.getStringAndRemove("renamedBySeuZe")?.let {
+                publicBukkitValuesMap.setBoolean("sparklypower:is_renamed_by_seu_ze", it.toBoolean())
+            }
+
+            perfectDreamsMap.getStringAndRemove("isMonsterPickaxe")?.let {
+                publicBukkitValuesMap.setBoolean("sparklypower:is_monster_tool", it.toBoolean())
+            }
+
+            perfectDreamsMap.getStringAndRemove("itemOwner")?.let {
+                publicBukkitValuesMap.setString("sparklypower:item_owner", it)
+            }
+
+            perfectDreamsMap.getStringAndRemove("DreamFusca")?.let {
+                publicBukkitValuesMap.setString("sparklypower:fusca_info", it)
+            }
+
+            perfectDreamsMap.getStringAndRemove("isFusca")?.let {
+                publicBukkitValuesMap.setBoolean("sparklypower:is_fusca", it.toBoolean())
+            }
+
+            perfectDreamsMap.getStringAndRemove("fancyLeatherArmor")?.let {
+                publicBukkitValuesMap.setBoolean("sparklypower:is_fancy_leather_armor", it.toBoolean())
+            }
+
+            perfectDreamsMap.getStringAndRemove("caixaSecretaLevel")?.let {
+                publicBukkitValuesMap.setInt("sparklypower:caixa_secreta_level", it.toInt())
+            }
+
+            perfectDreamsMap.getStringAndRemove("caixaSecretaWorld")?.let {
+                publicBukkitValuesMap.setString("sparklypower:caixa_secreta_world", it)
+            }
+
+            perfectDreamsMap.getStringAndRemove("isMoveSpawners")?.let {
+                publicBukkitValuesMap.setBoolean("sparklypower:is_move_spawners_tool", it.toBoolean())
+            }
+
+            perfectDreamsMap.getStringAndRemove("spawnerType")?.let {
+                publicBukkitValuesMap.setString("sparklypower:spawner_type", it)
+            }
+
+            perfectDreamsMap.getStringAndRemove("isMochila")?.let {
+                publicBukkitValuesMap.setBoolean("sparklypower:is_mochila", it.toBoolean())
+            }
+
+            perfectDreamsMap.getStringAndRemove("mochilaId")?.let {
+                publicBukkitValuesMap.setLong("sparklypower:mochila_id", it.toLong())
+            }
+
+            perfectDreamsMap.getStringAndRemove("customMapOwner")?.let {
+                publicBukkitValuesMap.setString("sparklypower:map_custom_owner", it)
+            }
+
+            perfectDreamsMap.getStringAndRemove("quickTeleport")?.let {
+                publicBukkitValuesMap.setBoolean("sparklypower:is_quick_resources_teleport", it.toBoolean())
+            }
+
+            // If it is empty, then it means that we have migrated everything and we can remove the old PerfectDreams tag, yay!
+            if (perfectDreamsMap.isEmpty)
+                tag.remove("PerfectDreams")
+        }
+    }
+
+    private fun MapType<String>.getStringAndRemove(key: String): String? {
+        val v = getString(key)
+        remove(key)
+        return v
+    }
+}
\ No newline at end of file
