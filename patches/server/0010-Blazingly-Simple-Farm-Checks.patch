From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrPowerGamerBR <git@mrpowergamerbr.com>
Date: Mon, 20 Nov 2023 20:17:56 -0300
Subject: [PATCH] Blazingly Simple Farm Checks


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3aab37ae2ef5a359b09c885f0988aa7be84b0159..ccf79aef050e2ef1ece1631e5bb165ef7fe3bca6 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -313,7 +313,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public volatile boolean abnormalExit = false; // Paper
     public static final long SERVER_INIT = System.nanoTime(); // Paper - Lag compensation
     public final Set<Entity> entitiesWithScheduledTasks = java.util.concurrent.ConcurrentHashMap.newKeySet(); // SparklyPaper - skip EntityScheduler's executeTick checks if there isn't any tasks to be run (concurrent because plugins may schedule tasks async)
-    
+
     public static <S extends MinecraftServer> S spin(Function<Thread, S> serverFactory) {
         AtomicReference<S> atomicreference = new AtomicReference();
         Thread thread = new io.papermc.paper.util.TickThread(() -> { // Paper - rewrite chunk system
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 5b96d1ae4bd8546311e986bc312b1f85883a67f4..ec20b138642b080c9d0050cbdb8c6d593264ecd5 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -81,6 +81,57 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
             int i = this.getAge(state);
 
             if (i < this.getMaxAge()) {
+                // SparklyPaper start - Blazingly simple farm checks
+                if (world.sparklyPaperConfig.getBlazinglySimpleFarmChecks().getEnabled()) {
+                    // These checks are similar to getGrowthSpeed, but we have "inlined" them because we want to access stuff like the farm block data later on
+                    // Is the block below us moisturised?
+                    BlockPos farmlandBelowTheCurrentBlock = pos.below();
+                    BlockState farmlandBelowTheCurrentBlockData = world.getBlockState(farmlandBelowTheCurrentBlock);
+                    float f = world.sparklyPaperConfig.getBlazinglySimpleFarmChecks().getDefaultGrowthSpeed();
+                    boolean isCurrentFarmlandStateMoist = false;
+                    if (farmlandBelowTheCurrentBlockData.is(Blocks.FARMLAND)) {
+                        if ((Integer) farmlandBelowTheCurrentBlockData.getValue(FarmBlock.MOISTURE) > 0) {
+                            // If we are currently moist, increase the speed!
+                            f = world.sparklyPaperConfig.getBlazinglySimpleFarmChecks().getMoistGrowthSpeed();
+                            isCurrentFarmlandStateMoist = true;
+                        }
+                    }
+                    // If we are skipping the middle aging stages, we need to change the growth speed and the next stage accordingly
+                    if (world.sparklyPaperConfig.getBlazinglySimpleFarmChecks().getSkipMiddleAgingStagesForCrops()) {
+                        f = f / getMaxAge();
+                        i = getMaxAge() - 1;
+                    }
+                    
+                    // Spigot start
+                    int modifier;
+                    if (this == Blocks.BEETROOTS) {
+                        modifier = world.spigotConfig.beetrootModifier;
+                    } else if (this == Blocks.CARROTS) {
+                        modifier = world.spigotConfig.carrotModifier;
+                    } else if (this == Blocks.POTATOES) {
+                        modifier = world.spigotConfig.potatoModifier;
+                        // Paper start
+                    } else if (this == Blocks.TORCHFLOWER_CROP) {
+                        modifier = world.spigotConfig.torchFlowerModifier;
+                        // Paper end
+                    } else {
+                        modifier = world.spigotConfig.wheatModifier;
+                    }
+
+                    if (random.nextFloat() < (modifier / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                        // Spigot end
+                        if (!CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2)) {
+                            return;
+                        }
+
+                        // Now that we know that the crop will grow... is the next stage the crop's max age? If yes, we are going to check if the farm land is moist!
+                        if (i + 1 == getMaxAge() && isCurrentFarmlandStateMoist && !FarmBlock.isNearWater(world, farmlandBelowTheCurrentBlock)) {
+                            // Whoops, farm land ain't moist!
+                            // From FarmBlock, set the moisture to 0
+                            org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, farmlandBelowTheCurrentBlock, (BlockState) farmlandBelowTheCurrentBlockData.setValue(FarmBlock.MOISTURE, 0), 2); // CraftBukkit
+                        }
+                    }
+                } else {
                 float f = CropBlock.getGrowthSpeed(this, world, pos);
 
                 // Spigot start
@@ -103,6 +154,8 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
                     // Spigot end
                     CraftEventFactory.handleBlockGrowEvent(world, pos, this.getStateForAge(i + 1), 2); // CraftBukkit
                 }
+                }
+                // SparklyPaper end
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 6e4c852c93f2418ea69e485ed3a10cbe3a6e3bd2..fc2703fcf1639a85518330e4ffcd0c23fd6e118f 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -92,6 +92,19 @@ public class FarmBlock extends Block {
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = (Integer) state.getValue(FarmBlock.MOISTURE);
+        // SparklyPaper start - Blazingly simple farm checks
+        if (world.sparklyPaperConfig.getBlazinglySimpleFarmChecks().getEnabled()) {
+            if (i == 0) { // We only care about non-moisturised farm blocks
+                if (FarmBlock.isNearWater(world, pos)) {
+                    // Make it MOIST!
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, 7), 2); // CraftBukkit
+                } else if (!FarmBlock.shouldMaintainFarmland(world, pos)) {
+                    FarmBlock.turnToDirt((Entity) null, state, world, pos);
+                }
+            }
+            return;
+        }
+        // SparklyPaper end
         if (i > 0 && world.paperConfig().tickRates.wetFarmland != 1 && (world.paperConfig().tickRates.wetFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.wetFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
         if (i == 0 && world.paperConfig().tickRates.dryFarmland != 1 && (world.paperConfig().tickRates.dryFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.dryFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
 
@@ -150,7 +163,7 @@ public class FarmBlock extends Block {
         return world.getBlockState(pos.above()).is(BlockTags.MAINTAINS_FARMLAND);
     }
 
-    private static boolean isNearWater(LevelReader world, BlockPos pos) {
+    public static boolean isNearWater(LevelReader world, BlockPos pos) { // SparklyPaper - make public for the Blazingly simple farm checks
         // Paper start - Perf: remove abstract block iteration
         int xOff = pos.getX();
         int yOff = pos.getY();
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 121a872cd750a87b779895687ae1abf5bb77b088..a5d1931dc80febe74601d7a8f2d975c702b357aa 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -73,6 +73,56 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.getRawBrightness(pos, 0) >= 9) {
+            // SparklyPaper start - Blazingly simple farm checks
+            if (world.sparklyPaperConfig.getBlazinglySimpleFarmChecks().getEnabled()) {
+                // These checks are similar to getGrowthSpeed, but we have "inlined" them because we want to access stuff like the farm block data later on
+                // Is the block below us moisturised?
+                BlockPos farmlandBelowTheCurrentBlock = pos.below();
+                BlockState farmlandBelowTheCurrentBlockData = world.getBlockState(farmlandBelowTheCurrentBlock);
+                float f = world.sparklyPaperConfig.getBlazinglySimpleFarmChecks().getDefaultGrowthSpeed();
+                boolean isCurrentFarmlandStateMoist = false;
+                if (farmlandBelowTheCurrentBlockData.is(Blocks.FARMLAND)) {
+                    if ((Integer) farmlandBelowTheCurrentBlockData.getValue(FarmBlock.MOISTURE) > 0) {
+                        // If we are currently moist, increase the speed!
+                        f = world.sparklyPaperConfig.getBlazinglySimpleFarmChecks().getMoistGrowthSpeed();
+                        isCurrentFarmlandStateMoist = true;
+                    }
+                }
+
+                if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                    int i = (Integer) state.getValue(StemBlock.AGE);
+
+                    if (i < 7) {
+                        state = (BlockState) state.setValue(StemBlock.AGE, i + 1);
+                        CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
+                    } else {
+                        Direction enumdirection = Direction.Plane.HORIZONTAL.getRandomDirection(random);
+                        BlockPos blockposition1 = pos.relative(enumdirection);
+                        BlockState iblockdata1 = world.getBlockState(blockposition1.below());
+
+                        if (world.getBlockState(blockposition1).isAir() && (iblockdata1.is(Blocks.FARMLAND) || iblockdata1.is(BlockTags.DIRT))) {
+                            Registry<Block> iregistry = world.registryAccess().registryOrThrow(Registries.BLOCK);
+                            Optional<Block> optional = iregistry.getOptional(this.fruit);
+                            Optional<Block> optional1 = iregistry.getOptional(this.attachedStem);
+
+                            if (optional.isPresent() && optional1.isPresent()) {
+                                // CraftBukkit start
+                                if (!CraftEventFactory.handleBlockGrowEvent(world, blockposition1, ((Block) optional.get()).defaultBlockState())) {
+                                    return;
+                                }
+                                // CraftBukkit end
+                                // Now that we know that the crop will grow... is the next stage the crop's max age? If yes, we are going to check if the farm land is moist!
+                                if (isCurrentFarmlandStateMoist && !FarmBlock.isNearWater(world, farmlandBelowTheCurrentBlock)) {
+                                    // Whoops, farm land ain't moist!
+                                    // From FarmBlock, set the moisture to 0
+                                    org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, farmlandBelowTheCurrentBlock, (BlockState) farmlandBelowTheCurrentBlockData.setValue(FarmBlock.MOISTURE, 0), 2); // CraftBukkit
+                                }
+                                world.setBlockAndUpdate(pos, (BlockState) ((Block) optional1.get()).defaultBlockState().setValue(HorizontalDirectionalBlock.FACING, enumdirection));
+                            }
+                        }
+                    }
+                }
+            } else {
             float f = CropBlock.getGrowthSpeed(this, world, pos);
 
             if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
@@ -102,7 +152,8 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
                     }
                 }
             }
-
+            }
+            // SparklyPaper end
         }
     }
 
